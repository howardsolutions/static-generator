[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "TextNode",
        "importPath": "textnode",
        "description": "textnode",
        "isExtraImport": true,
        "detail": "textnode",
        "documentation": {}
    },
    {
        "label": "TextType",
        "importPath": "textnode",
        "description": "textnode",
        "isExtraImport": true,
        "detail": "textnode",
        "documentation": {}
    },
    {
        "label": "TextNode",
        "importPath": "textnode",
        "description": "textnode",
        "isExtraImport": true,
        "detail": "textnode",
        "documentation": {}
    },
    {
        "label": "TextType",
        "importPath": "textnode",
        "description": "textnode",
        "isExtraImport": true,
        "detail": "textnode",
        "documentation": {}
    },
    {
        "label": "text_node_to_html_node",
        "importPath": "textnode",
        "description": "textnode",
        "isExtraImport": true,
        "detail": "textnode",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "HTMLNode",
        "importPath": "htmlnode",
        "description": "htmlnode",
        "isExtraImport": true,
        "detail": "htmlnode",
        "documentation": {}
    },
    {
        "label": "LeafNode",
        "importPath": "htmlnode",
        "description": "htmlnode",
        "isExtraImport": true,
        "detail": "htmlnode",
        "documentation": {}
    },
    {
        "label": "ParentNode",
        "importPath": "htmlnode",
        "description": "htmlnode",
        "isExtraImport": true,
        "detail": "htmlnode",
        "documentation": {}
    },
    {
        "label": "HTMLNode",
        "importPath": "htmlnode",
        "description": "htmlnode",
        "isExtraImport": true,
        "detail": "htmlnode",
        "documentation": {}
    },
    {
        "label": "LeafNode",
        "importPath": "htmlnode",
        "description": "htmlnode",
        "isExtraImport": true,
        "detail": "htmlnode",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "HTMLNode",
        "kind": 6,
        "importPath": "src.htmlnode",
        "description": "src.htmlnode",
        "peekOfCode": "class HTMLNode:\n    def __init__(self, tag=None, value=None, children=None, props=None):\n        self.tag = tag\n        self.value = value\n        self.children = children\n        self.props = props\n    def to_html(self):\n        raise NotImplementedError(\"to_html not implemented\")\n    def props_to_html(self):\n        if self.props is None:",
        "detail": "src.htmlnode",
        "documentation": {}
    },
    {
        "label": "LeafNode",
        "kind": 6,
        "importPath": "src.htmlnode",
        "description": "src.htmlnode",
        "peekOfCode": "class LeafNode(HTMLNode):\n    def __init__(self, tag=None, value=None, props=None):\n        if value is None:\n            raise ValueError(\"value is required\")\n        super().__init__(tag, value, None, props)\n    def to_html(self):\n        if self.value is None:\n            raise ValueError(\"value is required\")\n        if self.tag is not None:\n            props_html = self.props_to_html()",
        "detail": "src.htmlnode",
        "documentation": {}
    },
    {
        "label": "ParentNode",
        "kind": 6,
        "importPath": "src.htmlnode",
        "description": "src.htmlnode",
        "peekOfCode": "class ParentNode(HTMLNode):\n    def __init__(self, tag, children, props=None):\n        if tag is None or children is None:\n            raise ValueError(\"tag and children are required\")\n        if not all(isinstance(child, HTMLNode) for child in children):\n            raise ValueError(\"all children must be HTMLNode instances\")\n        super().__init__(tag, None, children, props)\n    def to_html(self):\n        if self.tag is None:\n            raise ValueError(\"tag is required\")",
        "detail": "src.htmlnode",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "src.main",
        "description": "src.main",
        "peekOfCode": "def main():\n    node = TextNode(\"This is a test\", TextType.NORMAL)\n    print(node)\nif __name__ == \"__main__\":\n    main()",
        "detail": "src.main",
        "documentation": {}
    },
    {
        "label": "TestHTMLNode",
        "kind": 6,
        "importPath": "src.test_htmlnode",
        "description": "src.test_htmlnode",
        "peekOfCode": "class TestHTMLNode(unittest.TestCase):\n    def test_props_to_html(self):\n        node = HTMLNode(\n            \"a\",\n            \"Click me!\",\n            None,\n            {\"href\": \"https://www.google.com\", \"target\": \"_blank\"}\n        )\n        expected = 'href=\"https://www.google.com\" target=\"_blank\"'\n        self.assertEqual(node.props_to_html(), expected)",
        "detail": "src.test_htmlnode",
        "documentation": {}
    },
    {
        "label": "TestLeafNode",
        "kind": 6,
        "importPath": "src.test_htmlnode",
        "description": "src.test_htmlnode",
        "peekOfCode": "class TestLeafNode(unittest.TestCase):\n    def test_leaf_node_with_tag_and_value(self):\n        node = LeafNode(\"p\", \"Hello world\")\n        expected = \"<p>Hello world</p>\"\n        self.assertEqual(node.to_html(), expected)\n    def test_leaf_node_with_props(self):\n        node = LeafNode(\"a\", \"Click me!\", {\"href\": \"https://www.google.com\"})\n        expected = '<a href=\"https://www.google.com\">Click me!</a>'\n        self.assertEqual(node.to_html(), expected)\n    def test_leaf_to_html_p(self):",
        "detail": "src.test_htmlnode",
        "documentation": {}
    },
    {
        "label": "TestParentNode",
        "kind": 6,
        "importPath": "src.test_htmlnode",
        "description": "src.test_htmlnode",
        "peekOfCode": "class TestParentNode(unittest.TestCase):\n    def test_to_html_with_children(self):\n        child_node = LeafNode(\"span\", \"child\")\n        parent_node = ParentNode(\"div\", [child_node])\n        self.assertEqual(parent_node.to_html(), \"<div><span>child</span></div>\")\n    def test_to_html_with_grandchildren(self):\n        grandchild_node = LeafNode(\"b\", \"grandchild\")\n        child_node = ParentNode(\"span\", [grandchild_node])\n        parent_node = ParentNode(\"div\", [child_node])\n        self.assertEqual(",
        "detail": "src.test_htmlnode",
        "documentation": {}
    },
    {
        "label": "TestTextNode",
        "kind": 6,
        "importPath": "src.test_textnode",
        "description": "src.test_textnode",
        "peekOfCode": "class TestTextNode(unittest.TestCase):\n    def test_eq(self):\n        node = TextNode(\"This is a text node\", TextType.BOLD)\n        node2 = TextNode(\"This is a text node\", TextType.BOLD)\n        self.assertEqual(node, node2)\n    def test_not_eq_different_text(self):\n        node = TextNode(\"This is a text node\", TextType.BOLD)\n        node2 = TextNode(\"This is a different text node\", TextType.BOLD)\n        self.assertNotEqual(node, node2)\n    def test_not_eq_different_type(self):",
        "detail": "src.test_textnode",
        "documentation": {}
    },
    {
        "label": "TextType",
        "kind": 6,
        "importPath": "src.textnode",
        "description": "src.textnode",
        "peekOfCode": "class TextType(Enum):\n    NORMAL = \"normal\"\n    BOLD = \"bold\"\n    ITALIC = \"italic\"\n    CODE = \"code\"\n    LINK = \"link\"\n    IMAGE = \"image\"\nclass TextNode:\n    def __init__(self, text, text_type, url=None):\n        self.text = text",
        "detail": "src.textnode",
        "documentation": {}
    },
    {
        "label": "TextNode",
        "kind": 6,
        "importPath": "src.textnode",
        "description": "src.textnode",
        "peekOfCode": "class TextNode:\n    def __init__(self, text, text_type, url=None):\n        self.text = text\n        self.text_type = text_type\n        self.url = url\n    def __eq__(self, other):\n        if not isinstance(other, TextNode):\n            return False\n        return (\n            self.text == other.text and",
        "detail": "src.textnode",
        "documentation": {}
    },
    {
        "label": "text_node_to_html_node",
        "kind": 2,
        "importPath": "src.textnode",
        "description": "src.textnode",
        "peekOfCode": "def text_node_to_html_node(text_node):\n    if not isinstance(text_node, TextNode):\n        raise ValueError(\"Input must be a TextNode\")\n    if text_node.text_type == TextType.TEXT:\n        return LeafNode(value=text_node.text)\n    elif text_node.text_type == TextType.BOLD:\n        return LeafNode(tag=\"b\", value=text_node.text)\n    elif text_node.text_type == TextType.ITALIC:\n        return LeafNode(tag=\"i\", value=text_node.text)\n    elif text_node.text_type == TextType.CODE:",
        "detail": "src.textnode",
        "documentation": {}
    }
]